// Code generated by ent, DO NOT EDIT.

package ogent

import "2022-dev-career-boost-handon/ent"

func NewOrganizationCreate(e *ent.Organization) *OrganizationCreate {
	if e == nil {
		return nil
	}
	var ret OrganizationCreate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewOrganizationCreates(es []*ent.Organization) []OrganizationCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationCreate, len(es))
	for i, e := range es {
		r[i] = NewOrganizationCreate(e).Elem()
	}
	return r
}

func (o *OrganizationCreate) Elem() OrganizationCreate {
	if o == nil {
		return OrganizationCreate{}
	}
	return *o
}

func NewOrganizationList(e *ent.Organization) *OrganizationList {
	if e == nil {
		return nil
	}
	var ret OrganizationList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewOrganizationLists(es []*ent.Organization) []OrganizationList {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationList, len(es))
	for i, e := range es {
		r[i] = NewOrganizationList(e).Elem()
	}
	return r
}

func (o *OrganizationList) Elem() OrganizationList {
	if o == nil {
		return OrganizationList{}
	}
	return *o
}

func NewOrganizationRead(e *ent.Organization) *OrganizationRead {
	if e == nil {
		return nil
	}
	var ret OrganizationRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewOrganizationReads(es []*ent.Organization) []OrganizationRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationRead, len(es))
	for i, e := range es {
		r[i] = NewOrganizationRead(e).Elem()
	}
	return r
}

func (o *OrganizationRead) Elem() OrganizationRead {
	if o == nil {
		return OrganizationRead{}
	}
	return *o
}

func NewOrganizationUpdate(e *ent.Organization) *OrganizationUpdate {
	if e == nil {
		return nil
	}
	var ret OrganizationUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewOrganizationUpdates(es []*ent.Organization) []OrganizationUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationUpdate, len(es))
	for i, e := range es {
		r[i] = NewOrganizationUpdate(e).Elem()
	}
	return r
}

func (o *OrganizationUpdate) Elem() OrganizationUpdate {
	if o == nil {
		return OrganizationUpdate{}
	}
	return *o
}

func NewOrganizationUsersList(e *ent.User) *OrganizationUsersList {
	if e == nil {
		return nil
	}
	var ret OrganizationUsersList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewOrganizationUsersLists(es []*ent.User) []OrganizationUsersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]OrganizationUsersList, len(es))
	for i, e := range es {
		r[i] = NewOrganizationUsersList(e).Elem()
	}
	return r
}

func (u *OrganizationUsersList) Elem() OrganizationUsersList {
	if u == nil {
		return OrganizationUsersList{}
	}
	return *u
}

func NewUserCreate(e *ent.User) *UserCreate {
	if e == nil {
		return nil
	}
	var ret UserCreate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserCreates(es []*ent.User) []UserCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserCreate, len(es))
	for i, e := range es {
		r[i] = NewUserCreate(e).Elem()
	}
	return r
}

func (u *UserCreate) Elem() UserCreate {
	if u == nil {
		return UserCreate{}
	}
	return *u
}

func NewUserList(e *ent.User) *UserList {
	if e == nil {
		return nil
	}
	var ret UserList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserLists(es []*ent.User) []UserList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserList, len(es))
	for i, e := range es {
		r[i] = NewUserList(e).Elem()
	}
	return r
}

func (u *UserList) Elem() UserList {
	if u == nil {
		return UserList{}
	}
	return *u
}

func NewUserRead(e *ent.User) *UserRead {
	if e == nil {
		return nil
	}
	var ret UserRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserReads(es []*ent.User) []UserRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserRead, len(es))
	for i, e := range es {
		r[i] = NewUserRead(e).Elem()
	}
	return r
}

func (u *UserRead) Elem() UserRead {
	if u == nil {
		return UserRead{}
	}
	return *u
}

func NewUserUpdate(e *ent.User) *UserUpdate {
	if e == nil {
		return nil
	}
	var ret UserUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserUpdates(es []*ent.User) []UserUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserUpdate, len(es))
	for i, e := range es {
		r[i] = NewUserUpdate(e).Elem()
	}
	return r
}

func (u *UserUpdate) Elem() UserUpdate {
	if u == nil {
		return UserUpdate{}
	}
	return *u
}

func NewUserOrganizationsList(e *ent.Organization) *UserOrganizationsList {
	if e == nil {
		return nil
	}
	var ret UserOrganizationsList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewUserOrganizationsLists(es []*ent.Organization) []UserOrganizationsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserOrganizationsList, len(es))
	for i, e := range es {
		r[i] = NewUserOrganizationsList(e).Elem()
	}
	return r
}

func (o *UserOrganizationsList) Elem() UserOrganizationsList {
	if o == nil {
		return UserOrganizationsList{}
	}
	return *o
}
