// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"github.com/go-faster/jx"
)

type CreateOrganizationReq struct {
	Name  string `json:"name"`
	Users []int  `json:"users"`
}

// GetName returns the value of Name.
func (s CreateOrganizationReq) GetName() string {
	return s.Name
}

// GetUsers returns the value of Users.
func (s CreateOrganizationReq) GetUsers() []int {
	return s.Users
}

// SetName sets the value of Name.
func (s *CreateOrganizationReq) SetName(val string) {
	s.Name = val
}

// SetUsers sets the value of Users.
func (s *CreateOrganizationReq) SetUsers(val []int) {
	s.Users = val
}

type CreateUserReq struct {
	Name          string `json:"name"`
	Organizations []int  `json:"organizations"`
}

// GetName returns the value of Name.
func (s CreateUserReq) GetName() string {
	return s.Name
}

// GetOrganizations returns the value of Organizations.
func (s CreateUserReq) GetOrganizations() []int {
	return s.Organizations
}

// SetName sets the value of Name.
func (s *CreateUserReq) SetName(val string) {
	s.Name = val
}

// SetOrganizations sets the value of Organizations.
func (s *CreateUserReq) SetOrganizations(val []int) {
	s.Organizations = val
}

// DeleteOrganizationNoContent is response for DeleteOrganization operation.
type DeleteOrganizationNoContent struct{}

func (*DeleteOrganizationNoContent) deleteOrganizationRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type ListOrganizationOKApplicationJSON []OrganizationList

func (ListOrganizationOKApplicationJSON) listOrganizationRes() {}

type ListOrganizationUsersOKApplicationJSON []OrganizationUsersList

func (ListOrganizationUsersOKApplicationJSON) listOrganizationUsersRes() {}

type ListUserOKApplicationJSON []UserList

func (ListUserOKApplicationJSON) listUserRes() {}

type ListUserOrganizationsOKApplicationJSON []UserOrganizationsList

func (ListUserOrganizationsOKApplicationJSON) listUserOrganizationsRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OrganizationCreate
type OrganizationCreate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s OrganizationCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s OrganizationCreate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *OrganizationCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationCreate) SetName(val string) {
	s.Name = val
}

func (*OrganizationCreate) createOrganizationRes() {}

// Ref: #/components/schemas/OrganizationList
type OrganizationList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s OrganizationList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s OrganizationList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *OrganizationList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/OrganizationRead
type OrganizationRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s OrganizationRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s OrganizationRead) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *OrganizationRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationRead) SetName(val string) {
	s.Name = val
}

func (*OrganizationRead) readOrganizationRes() {}

// Ref: #/components/schemas/OrganizationUpdate
type OrganizationUpdate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s OrganizationUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s OrganizationUpdate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *OrganizationUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationUpdate) SetName(val string) {
	s.Name = val
}

func (*OrganizationUpdate) updateOrganizationRes() {}

// Ref: #/components/schemas/Organization_UsersList
type OrganizationUsersList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s OrganizationUsersList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s OrganizationUsersList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *OrganizationUsersList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OrganizationUsersList) SetName(val string) {
	s.Name = val
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createOrganizationRes()    {}
func (*R400) createUserRes()            {}
func (*R400) deleteOrganizationRes()    {}
func (*R400) deleteUserRes()            {}
func (*R400) listOrganizationRes()      {}
func (*R400) listOrganizationUsersRes() {}
func (*R400) listUserOrganizationsRes() {}
func (*R400) listUserRes()              {}
func (*R400) readOrganizationRes()      {}
func (*R400) readUserRes()              {}
func (*R400) updateOrganizationRes()    {}
func (*R400) updateUserRes()            {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteOrganizationRes()    {}
func (*R404) deleteUserRes()            {}
func (*R404) listOrganizationRes()      {}
func (*R404) listOrganizationUsersRes() {}
func (*R404) listUserOrganizationsRes() {}
func (*R404) listUserRes()              {}
func (*R404) readOrganizationRes()      {}
func (*R404) readUserRes()              {}
func (*R404) updateOrganizationRes()    {}
func (*R404) updateUserRes()            {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createOrganizationRes()    {}
func (*R409) createUserRes()            {}
func (*R409) deleteOrganizationRes()    {}
func (*R409) deleteUserRes()            {}
func (*R409) listOrganizationRes()      {}
func (*R409) listOrganizationUsersRes() {}
func (*R409) listUserOrganizationsRes() {}
func (*R409) listUserRes()              {}
func (*R409) readOrganizationRes()      {}
func (*R409) readUserRes()              {}
func (*R409) updateOrganizationRes()    {}
func (*R409) updateUserRes()            {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createOrganizationRes()    {}
func (*R500) createUserRes()            {}
func (*R500) deleteOrganizationRes()    {}
func (*R500) deleteUserRes()            {}
func (*R500) listOrganizationRes()      {}
func (*R500) listOrganizationUsersRes() {}
func (*R500) listUserOrganizationsRes() {}
func (*R500) listUserRes()              {}
func (*R500) readOrganizationRes()      {}
func (*R500) readUserRes()              {}
func (*R500) updateOrganizationRes()    {}
func (*R500) updateUserRes()            {}

type UpdateOrganizationReq struct {
	Name  OptString `json:"name"`
	Users []int     `json:"users"`
}

// GetName returns the value of Name.
func (s UpdateOrganizationReq) GetName() OptString {
	return s.Name
}

// GetUsers returns the value of Users.
func (s UpdateOrganizationReq) GetUsers() []int {
	return s.Users
}

// SetName sets the value of Name.
func (s *UpdateOrganizationReq) SetName(val OptString) {
	s.Name = val
}

// SetUsers sets the value of Users.
func (s *UpdateOrganizationReq) SetUsers(val []int) {
	s.Users = val
}

type UpdateUserReq struct {
	Name          OptString `json:"name"`
	Organizations []int     `json:"organizations"`
}

// GetName returns the value of Name.
func (s UpdateUserReq) GetName() OptString {
	return s.Name
}

// GetOrganizations returns the value of Organizations.
func (s UpdateUserReq) GetOrganizations() []int {
	return s.Organizations
}

// SetName sets the value of Name.
func (s *UpdateUserReq) SetName(val OptString) {
	s.Name = val
}

// SetOrganizations sets the value of Organizations.
func (s *UpdateUserReq) SetOrganizations(val []int) {
	s.Organizations = val
}

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s UserCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s UserCreate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *UserCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserCreate) SetName(val string) {
	s.Name = val
}

func (*UserCreate) createUserRes() {}

// Ref: #/components/schemas/UserList
type UserList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s UserList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s UserList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *UserList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/User_OrganizationsList
type UserOrganizationsList struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s UserOrganizationsList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s UserOrganizationsList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *UserOrganizationsList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserOrganizationsList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s UserRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s UserRead) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *UserRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserRead) SetName(val string) {
	s.Name = val
}

func (*UserRead) readUserRes() {}

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s UserUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s UserUpdate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *UserUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserUpdate) SetName(val string) {
	s.Name = val
}

func (*UserUpdate) updateUserRes() {}
