// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddUser implements addUser operation.
	//
	// PATCH /organizations/{id}/addUser
	AddUser(ctx context.Context, params AddUserParams) (AddUserOK, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Creates a new Organization and persists it to storage.
	//
	// POST /organizations
	CreateOrganization(ctx context.Context, req CreateOrganizationReq) (CreateOrganizationRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req CreateUserReq) (CreateUserRes, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Deletes the Organization with the requested ID.
	//
	// DELETE /organizations/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListOrganization implements listOrganization operation.
	//
	// List Organizations.
	//
	// GET /organizations
	ListOrganization(ctx context.Context, params ListOrganizationParams) (ListOrganizationRes, error)
	// ListOrganizationUsers implements listOrganizationUsers operation.
	//
	// List attached Users.
	//
	// GET /organizations/{id}/users
	ListOrganizationUsers(ctx context.Context, params ListOrganizationUsersParams) (ListOrganizationUsersRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserOrganizations implements listUserOrganizations operation.
	//
	// List attached Organizations.
	//
	// GET /users/{id}/organizations
	ListUserOrganizations(ctx context.Context, params ListUserOrganizationsParams) (ListUserOrganizationsRes, error)
	// ReadOrganization implements readOrganization operation.
	//
	// Finds the Organization with the requested ID and returns it.
	//
	// GET /organizations/{id}
	ReadOrganization(ctx context.Context, params ReadOrganizationParams) (ReadOrganizationRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Updates a Organization and persists changes to storage.
	//
	// PATCH /organizations/{id}
	UpdateOrganization(ctx context.Context, req UpdateOrganizationReq, params UpdateOrganizationParams) (UpdateOrganizationRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
